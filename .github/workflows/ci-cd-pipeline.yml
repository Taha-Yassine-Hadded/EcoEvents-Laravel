name: 🌿 EcoEvents CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature-devops-pipeline-clean ]
  pull_request:
    branches: [ main, develop, feature-devops-pipeline-clean ]
  workflow_dispatch:

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  # ==========================================
  # 1. CODE CHECKOUT & SETUP
  # ==========================================
  setup:
    name: 📦 Setup & Checkout
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Display branch info
        run: |
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Repository: Public with SonarCloud"

  # ==========================================
  # 2. BUILD & DEPENDENCIES
  # ==========================================
  build:
    name: 🔨 Build Application
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, json, bcmath, pdo, mysql
          coverage: xdebug
          tools: composer:v2

      - name: 📦 Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: 🎼 Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install NPM dependencies
        run: npm ci

      - name: ✅ Verify installations
        run: |
          php --version
          composer --version
          node --version
          npm --version

      - name: 💾 Upload vendor artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vendor
          path: vendor
          retention-days: 1

      - name: 💾 Upload node_modules artifacts
        uses: actions/upload-artifact@v4
        with:
          name: node_modules
          path: node_modules
          retention-days: 1

  # ==========================================
  # 3. STATIC CODE ANALYSIS - PHPSTAN
  # ==========================================
  phpstan:
    name: 🔍 PHPStan Analysis
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download vendor artifacts
        uses: actions/download-artifact@v4
        with:
          name: vendor
          path: vendor

      - name: 🐘 Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: 🔍 Run PHPStan
        run: vendor/bin/phpstan analyse --error-format=github || true

      - name: 📊 PHPStan Summary
        run: |
          echo "✅ PHPStan analysis completed"
          echo "📊 Check the logs above for any issues"

  # ==========================================
  # 4. (Removed) SONARCLOUD ANALYSIS
  # ==========================================

  # ==========================================
  # 5. UNIT & INTEGRATION TESTS
  # ==========================================
  tests:
    name: 🧪 Tests (PHPUnit)
    runs-on: ubuntu-latest
    needs: build
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: ecoEvent_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download vendor artifacts
        uses: actions/download-artifact@v4
        with:
          name: vendor
          path: vendor

      - name: 🐘 Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          coverage: xdebug

      - name: ⚙️ Prepare Laravel environment
        run: |
          cp .env.example .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=ecoEvent_test" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=password" >> .env
          echo "CACHE_DRIVER=array" >> .env
          echo "SESSION_DRIVER=array" >> .env
          echo "QUEUE_CONNECTION=sync" >> .env
          php artisan key:generate

      - name: 🧰 Prepare storage and cache directories
        run: |
          mkdir -p storage/framework/cache/data
          mkdir -p storage/framework/sessions
          mkdir -p storage/framework/views
          mkdir -p bootstrap/cache
          php artisan config:clear || true
          php artisan cache:clear || true
          php artisan view:clear || true

      - name: 🗄️ Run migrations
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: ecoEvent_test
          DB_USERNAME: root
          DB_PASSWORD: password
        run: |
          php artisan migrate --force
          php artisan config:clear
          php artisan cache:clear

      - name: 🧪 Execute PHPUnit tests
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: ecoEvent_test
          DB_USERNAME: root
          DB_PASSWORD: password
        run: php vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml

      - name: 📊 Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 7

  # ==========================================
  # 6. SECURITY AUDIT
  # ==========================================
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: vendor
          path: vendor

      - name: 📥 Download node_modules
        uses: actions/download-artifact@v4
        with:
          name: node_modules
          path: node_modules

      - name: 🐘 Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: 🔍 Composer security audit
        run: |
          composer audit --format=json > composer-audit.json || true
          echo "✅ Composer audit completed"

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 NPM security audit
        run: |
          npm audit --json > npm-audit.json || true
          echo "✅ NPM audit completed"

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            composer-audit.json
            npm-audit.json
          retention-days: 7

  # ==========================================
  # 7. BUILD FRONTEND ASSETS
  # ==========================================
  build-frontend:
    name: 🎨 Build Frontend Assets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install NPM dependencies
        run: npm ci

      - name: 🔨 Build production assets
        run: npm run build

      - name: 💾 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: public-build
          path: public/build
          retention-days: 7

  # ==========================================
  # 8. DOCKER BUILD & PUSH TO GITHUB PACKAGES
  # ==========================================
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [tests, security, build-frontend, phpstan]
    if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/')
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: public-build
          path: public/build

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧰 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==========================================
  # 9. DEPLOY TO STAGING
  # ==========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    if: startsWith(github.ref, 'refs/heads/')
    environment:
      name: staging
      url: https://staging.ecoevents.com
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging server
        run: |
          echo "🌿 Deploying to staging environment..."
          echo "Image: ghcr.io/${{ github.repository }}:develop-${{ github.sha }}"
          # Add your SSH deployment commands or webhook here
          # Example:
          # sshpass -p "${{ secrets.STAGING_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} "cd /app && docker-compose pull && docker-compose up -d"

      - name: 🗄️ Run migrations
        run: |
          echo "Running migrations on staging..."
          # ssh user@staging "cd /app && php artisan migrate --force"

      - name: 🧹 Clear cache
        run: |
          echo "Clearing cache on staging..."
          # ssh user@staging "cd /app && php artisan optimize"

  # ==========================================
  # 10. DEPLOY TO PRODUCTION
  # ==========================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    if: startsWith(github.ref, 'refs/heads/')
    environment:
      name: production
      url: https://ecoevents.com
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production server
        run: |
          echo "🌿 Deploying to production environment..."
          echo "Image: ghcr.io/${{ github.repository }}:latest"
          # Add your deployment commands here
          # Example:
          # sshpass -p "${{ secrets.PROD_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "cd /app && docker-compose pull && docker-compose up -d"

      - name: 🗄️ Run migrations
        run: |
          echo "Running migrations on production..."
          # ssh user@prod "cd /app && php artisan migrate --force"

      - name: 🧹 Optimize application
        run: |
          echo "Optimizing production..."
          # ssh user@prod "cd /app && php artisan optimize"

  # ==========================================
  # 11. POST-DEPLOYMENT MONITORING
  # ==========================================
  monitoring:
    name: 📊 Post-Deployment Checks
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: 🏥 Health check
        run: |
          echo "Running health checks..."
          # Example staging check
          # if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          #   curl -f https://staging.ecoevents.com/health || exit 1
          # fi
          # Example production check
          # if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          #   curl -f https://ecoevents.com/health || exit 1
          # fi

      - name: 📊 Send metrics to monitoring
        run: |
          echo "Sending deployment metrics..."
          # Integration with Grafana/Prometheus if configured
          # curl -X POST https://monitoring.ecoevents.com/metrics \
          #   -H "Authorization: Bearer ${{ secrets.MONITORING_TOKEN }}" \
          #   -d '{"deployment": "success", "branch": "${{ github.ref_name }}", "sha": "${{ github.sha }}"}'

      - name: ✅ Pipeline completed
        run: |
          echo "🌿 Pipeline DevOps EcoEvents terminée avec succès!"
          echo "Repository: Public with SonarCloud"
          echo "Branch: ${{ github.ref_name }}"
          echo "Timestamp: $(date)"
